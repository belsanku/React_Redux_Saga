{"ast":null,"code":"import { loginErrorAction, loginRequestAction, loginSuccessAction } from \"./actions\";\nimport { put, all, takeLatest, call } from 'redux-saga/effects';\nimport { actionTypes } from \"./actionTypes\";\nimport { login } from \"../../services/requests\";\nexport function* loginSaga(credentials) {\n  try {\n    yield put(loginRequestAction());\n    const response = yield call(login, credentials);\n    yield put(loginSuccessAction(response.data));\n  } catch (error) {\n    yield put(loginErrorAction(error));\n  }\n}\nexport function* registrationSaga(credentials) {\n  try {\n    yield put(registerRequestAction());\n    const response = yield call(register, credentials);\n    yield put(registerSuccessAction(response.data));\n  } catch (error) {\n    yield put(registerErrorAction(error));\n  }\n}\nexport default function* appSagaWatcher() {\n  yield all([takeLatest(actionTypes.LOGIN, loginSaga)]);\n}","map":{"version":3,"sources":["F:/noveo/my-react-app/src/ducks/app/sagas.js"],"names":["loginErrorAction","loginRequestAction","loginSuccessAction","put","all","takeLatest","call","actionTypes","login","loginSaga","credentials","response","data","error","registrationSaga","registerRequestAction","register","registerSuccessAction","registerErrorAction","appSagaWatcher","LOGIN"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,kBAA1B,EAA8CC,kBAA9C,QAAuE,WAAvE;AACA,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,UAAlB,EAA8BC,IAA9B,QAAyC,oBAAzC;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAAQC,KAAR,QAAoB,yBAApB;AAEA,OAAO,UAAUC,SAAV,CAAoBC,WAApB,EAAiC;AACpC,MAAI;AACA,UAAMP,GAAG,CAACF,kBAAkB,EAAnB,CAAT;AACA,UAAMU,QAAQ,GAAG,MAAML,IAAI,CAACE,KAAD,EAAQE,WAAR,CAA3B;AACA,UAAMP,GAAG,CAACD,kBAAkB,CAACS,QAAQ,CAACC,IAAV,CAAnB,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,UAAMV,GAAG,CAACH,gBAAgB,CAACa,KAAD,CAAjB,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,CAA2BJ,WAA3B,EAAwC;AAC3C,MAAI;AACA,UAAMP,GAAG,CAACY,qBAAqB,EAAtB,CAAT;AACA,UAAMJ,QAAQ,GAAG,MAAML,IAAI,CAACU,QAAD,EAAWN,WAAX,CAA3B;AACA,UAAMP,GAAG,CAACc,qBAAqB,CAACN,QAAQ,CAACC,IAAV,CAAtB,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,UAAMV,GAAG,CAACe,mBAAmB,CAACL,KAAD,CAApB,CAAT;AACH;AACJ;AAED,eAAe,UAAUM,cAAV,GAA2B;AACtC,QAAMf,GAAG,CAAC,CACPC,UAAU,CAACE,WAAW,CAACa,KAAb,EAAoBX,SAApB,CADH,CAAD,CAAT;AAGH","sourcesContent":["import {loginErrorAction, loginRequestAction, loginSuccessAction} from \"./actions\";\r\nimport {put, all, takeLatest, call} from 'redux-saga/effects'\r\nimport {actionTypes} from \"./actionTypes\";\r\nimport {login} from \"../../services/requests\";\r\n\r\nexport function* loginSaga(credentials) {\r\n    try {\r\n        yield put(loginRequestAction());\r\n        const response = yield call(login, credentials);\r\n        yield put(loginSuccessAction(response.data));\r\n    } catch (error) {\r\n        yield put(loginErrorAction(error));\r\n    }\r\n}\r\n\r\nexport function* registrationSaga(credentials) {\r\n    try {\r\n        yield put(registerRequestAction());\r\n        const response = yield call(register, credentials);\r\n        yield put(registerSuccessAction(response.data));\r\n    } catch (error) {\r\n        yield put(registerErrorAction(error));\r\n    }\r\n}\r\n\r\nexport default function* appSagaWatcher() {\r\n    yield all([\r\n       takeLatest(actionTypes.LOGIN, loginSaga)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}