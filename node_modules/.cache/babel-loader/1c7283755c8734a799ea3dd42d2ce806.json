{"ast":null,"code":"/**\r\n * Performs registration in the LS\r\n * @param username {string}\r\n * @param password {string}\r\n * @returns {Promise<{ data: Record<string, string> }>}\r\n */\nexport const register = _ref => {\n  let {\n    username,\n    password\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.2) {\n        const stringUsers = localStorage.getItem('users') || '';\n        const users = JSON.parse(stringUsers) || [];\n\n        if (!!users[username]) {\n          throw new Error('User already exists!');\n        }\n\n        const newUser = {\n          username,\n          id: Date.now(),\n          createdAt: new Date().toString()\n        };\n        users[username] = { ...newUser,\n          password\n        };\n        localStorage.setItem('users', JSON.stringify(users));\n        resolve({\n          data: newUser\n        });\n      } else {\n        throw new Error('Network error!');\n      }\n    }, 1000);\n  });\n};\n/**\r\n * Performs login according to the current LS users state\r\n * @param username {string}\r\n * @param password {string}\r\n * @returns {Promise<{ data: Record<string, string> }>}\r\n */\n\nexport const login = _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.2) {\n        const stringUsers = localStorage.getItem('users');\n        const users = JSON.parse(stringUsers);\n\n        if (!!users[username]) {\n          throw new Error('No such user found!');\n        }\n\n        const lsCurrentUser = users[username];\n\n        if (lsCurrentUser.password.toString() !== password.toString()) {\n          throw new Error('Incorrect password!');\n        }\n\n        resolve({\n          data: lsCurrentUser\n        });\n      } else {\n        throw new Error('Network error!');\n      }\n    }, 1000);\n  });\n};","map":{"version":3,"sources":["F:/noveo/my-react-app/src/services/requests.js"],"names":["register","username","password","Promise","resolve","reject","setTimeout","Math","random","stringUsers","localStorage","getItem","users","JSON","parse","Error","newUser","id","Date","now","createdAt","toString","setItem","stringify","data","login","lsCurrentUser"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAG,QAA4B;AAAA,MAA3B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;AAChD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,UAAU,CAAC,MAAM;AACb,UAAIC,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrB,cAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EAArD;AACA,cAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAX,KAA2B,EAAzC;;AAEA,YAAI,CAAC,CAACG,KAAK,CAACX,QAAD,CAAX,EAAuB;AACnB,gBAAM,IAAIc,KAAJ,CAAU,sBAAV,CAAN;AACH;;AAED,cAAMC,OAAO,GAAG;AACZf,UAAAA,QADY;AAEZgB,UAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAFQ;AAGZC,UAAAA,SAAS,EAAG,IAAIF,IAAJ,EAAD,CAAaG,QAAb;AAHC,SAAhB;AAMAT,QAAAA,KAAK,CAACX,QAAD,CAAL,GAAkB,EACd,GAAGe,OADW;AAEdd,UAAAA;AAFc,SAAlB;AAKAQ,QAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8BT,IAAI,CAACU,SAAL,CAAeX,KAAf,CAA9B;AACAR,QAAAA,OAAO,CAAC;AAAEoB,UAAAA,IAAI,EAAER;AAAR,SAAD,CAAP;AACH,OArBD,MAqBO;AACH,cAAM,IAAID,KAAJ,CAAU,gBAAV,CAAN;AACH;AACJ,KAzBS,EAyBP,IAzBO,CAAV;AA0BH,GA3BM,CAAP;AA4BH,CA7BM;AA+BP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMU,KAAK,GAAG,SAA4B;AAAA,MAA3B;AAAExB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;AAC7C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,UAAU,CAAC,MAAM;AACb,UAAIC,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrB,cAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,cAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAd;;AAEA,YAAI,CAAC,CAACG,KAAK,CAACX,QAAD,CAAX,EAAuB;AACnB,gBAAM,IAAIc,KAAJ,CAAU,qBAAV,CAAN;AACH;;AAED,cAAMW,aAAa,GAAGd,KAAK,CAACX,QAAD,CAA3B;;AAEA,YAAIyB,aAAa,CAACxB,QAAd,CAAuBmB,QAAvB,OAAsCnB,QAAQ,CAACmB,QAAT,EAA1C,EAA+D;AAC3D,gBAAM,IAAIN,KAAJ,CAAU,qBAAV,CAAN;AACH;;AAEDX,QAAAA,OAAO,CAAC;AAAEoB,UAAAA,IAAI,EAAEE;AAAR,SAAD,CAAP;AACH,OAfD,MAeO;AACH,cAAM,IAAIX,KAAJ,CAAU,gBAAV,CAAN;AACH;AACJ,KAnBS,EAmBP,IAnBO,CAAV;AAoBH,GArBM,CAAP;AAsBH,CAvBM","sourcesContent":["/**\r\n * Performs registration in the LS\r\n * @param username {string}\r\n * @param password {string}\r\n * @returns {Promise<{ data: Record<string, string> }>}\r\n */\r\nexport const register = ({ username, password }) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (Math.random() > 0.2) {\r\n                const stringUsers = localStorage.getItem('users') || '';\r\n                const users = JSON.parse(stringUsers) || [];\r\n\r\n                if (!!users[username]) {\r\n                    throw(new Error('User already exists!'));\r\n                }\r\n\r\n                const newUser = {\r\n                    username,\r\n                    id: Date.now(),\r\n                    createdAt: (new Date()).toString()\r\n                };\r\n\r\n                users[username] = {\r\n                    ...newUser,\r\n                    password\r\n                }\r\n\r\n                localStorage.setItem('users', JSON.stringify(users));\r\n                resolve({ data: newUser });\r\n            } else {\r\n                throw(new Error('Network error!'));\r\n            }\r\n        }, 1000);\r\n    });\r\n}\r\n\r\n/**\r\n * Performs login according to the current LS users state\r\n * @param username {string}\r\n * @param password {string}\r\n * @returns {Promise<{ data: Record<string, string> }>}\r\n */\r\nexport const login = ({ username, password }) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (Math.random() > 0.2) {\r\n                const stringUsers = localStorage.getItem('users');\r\n                const users = JSON.parse(stringUsers);\r\n\r\n                if (!!users[username]) {\r\n                    throw(new Error('No such user found!'));\r\n                }\r\n\r\n                const lsCurrentUser = users[username];\r\n\r\n                if (lsCurrentUser.password.toString() !== password.toString()) {\r\n                    throw(new Error('Incorrect password!'));\r\n                }\r\n\r\n                resolve({ data: lsCurrentUser });\r\n            } else {\r\n                throw(new Error('Network error!'));\r\n            }\r\n        }, 1000);\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}