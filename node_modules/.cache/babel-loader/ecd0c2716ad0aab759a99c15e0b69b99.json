{"ast":null,"code":"/**\r\n *\r\n * @param username {string}\r\n * @param password {string}\r\n * @returns {Promise<{username: string, password: string}>}\r\n */\nexport const register = _ref => {\n  let {\n    username,\n    password\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const stringUsers = localStorage.getItem('users');\n      const users = JSON.parse(stringUsers);\n\n      if (!!users[username]) {\n        throw new Error('User already exists!');\n      }\n\n      const newUser = {\n        username,\n        id: Date.now(),\n        createdAt: new Date().toString()\n      };\n      users[username] = { ...newUser,\n        password\n      };\n      localStorage.setItem('users', JSON.stringify(users));\n\n      if (Math.random() > 0.2) {\n        resolve(newUser);\n      } else {\n        throw new Error('Network error!');\n      }\n    }, 1000);\n  });\n}; ///Отвал башки\n\nexport const login = _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.2) {\n        var _username$toUpperCase;\n\n        resolve({\n          username: (_username$toUpperCase = username === null || username === void 0 ? void 0 : username.toUpperCase()) !== null && _username$toUpperCase !== void 0 ? _username$toUpperCase : 'BILLY'\n        });\n      } else {\n        throw new Error('Impossible!');\n      }\n    }, 1000);\n  });\n};","map":{"version":3,"sources":["F:/noveo/my-react-app/src/services/requests.js"],"names":["register","username","password","Promise","resolve","reject","setTimeout","stringUsers","localStorage","getItem","users","JSON","parse","Error","newUser","id","Date","now","createdAt","toString","setItem","stringify","Math","random","login","toUpperCase"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAG,QAA4B;AAAA,MAA3B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;AAChD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,UAAU,CAAC,MAAM;AACb,YAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,YAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAd;;AAEA,UAAI,CAAC,CAACG,KAAK,CAACT,QAAD,CAAX,EAAuB;AACnB,cAAM,IAAIY,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,YAAMC,OAAO,GAAG;AACZb,QAAAA,QADY;AAEZc,QAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAFQ;AAGZC,QAAAA,SAAS,EAAG,IAAIF,IAAJ,EAAD,CAAaG,QAAb;AAHC,OAAhB;AAMAT,MAAAA,KAAK,CAACT,QAAD,CAAL,GAAkB,EACd,GAAGa,OADW;AAEdZ,QAAAA;AAFc,OAAlB;AAKAM,MAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8BT,IAAI,CAACU,SAAL,CAAeX,KAAf,CAA9B;;AAEA,UAAIY,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACrBnB,QAAAA,OAAO,CAACU,OAAD,CAAP;AACH,OAFD,MAEO;AACH,cAAM,IAAID,KAAJ,CAAU,gBAAV,CAAN;AACH;AACJ,KAzBS,EAyBP,IAzBO,CAAV;AA0BH,GA3BM,CAAP;AA4BH,CA7BM,C,CA8BP;;AACA,OAAO,MAAMW,KAAK,GAAG,SAA4B;AAAA,MAA3B;AAAEvB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;AAC7C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpCC,IAAAA,UAAU,CAAC,MAAM;AACb,UAAIgB,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AAAA;;AACrBnB,QAAAA,OAAO,CAAC;AACJH,UAAAA,QAAQ,2BAAEA,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEwB,WAAV,EAAF,yEAA6B;AADjC,SAAD,CAAP;AAGH,OAJD,MAIO;AACH,cAAM,IAAIZ,KAAJ,CAAU,aAAV,CAAN;AACH;AACJ,KARS,EAQP,IARO,CAAV;AASH,GAXM,CAAP;AAYH,CAbM","sourcesContent":["/**\r\n *\r\n * @param username {string}\r\n * @param password {string}\r\n * @returns {Promise<{username: string, password: string}>}\r\n */\r\nexport const register = ({ username, password }) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const stringUsers = localStorage.getItem('users');\r\n            const users = JSON.parse(stringUsers);\r\n\r\n            if (!!users[username]) {\r\n                throw(new Error('User already exists!'));\r\n            }\r\n            const newUser = {\r\n                username,\r\n                id: Date.now(),\r\n                createdAt: (new Date()).toString()\r\n            };\r\n\r\n            users[username] = {\r\n                ...newUser,\r\n                password\r\n            }\r\n\r\n            localStorage.setItem('users', JSON.stringify(users));\r\n\r\n            if (Math.random() > 0.2) {\r\n                resolve(newUser);\r\n            } else {\r\n                throw(new Error('Network error!'));\r\n            }\r\n        }, 1000);\r\n    });\r\n}\r\n///Отвал башки\r\nexport const login = ({ username, password }) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        setTimeout(() => {\r\n            if (Math.random() > 0.2) {\r\n                resolve({\r\n                    username: username?.toUpperCase() ?? 'BILLY'\r\n                });\r\n            } else {\r\n                throw(new Error('Impossible!'));\r\n            }\r\n        }, 1000);\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}