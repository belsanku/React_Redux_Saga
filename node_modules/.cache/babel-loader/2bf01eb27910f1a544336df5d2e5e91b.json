{"ast":null,"code":"/**\r\n *\r\n * @param username {string}\r\n * @param password {string}\r\n * @returns {Promise<{username: string, password: string}>}\r\n */\nexport const register = _ref => {\n  let {\n    username,\n    password\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    localStorage.setItem('user', JSON.parse({\n      username,\n      password\n    }));\n    setTimeout(() => {\n      if (Math.random() > 0.2) {\n        var _username$toUpperCase;\n\n        resolve({\n          username: (_username$toUpperCase = username === null || username === void 0 ? void 0 : username.toUpperCase()) !== null && _username$toUpperCase !== void 0 ? _username$toUpperCase : 'BILLY'\n        });\n      } else {\n        throw new Error('Impossible!');\n      }\n    }, 3000);\n  });\n};\nexport const login = _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.5) {\n        var _username$toUpperCase2;\n\n        resolve({\n          username: (_username$toUpperCase2 = username === null || username === void 0 ? void 0 : username.toUpperCase()) !== null && _username$toUpperCase2 !== void 0 ? _username$toUpperCase2 : 'BILLY'\n        });\n      } else {\n        throw new Error('Impossible!');\n      }\n    }, 3000);\n  });\n};","map":{"version":3,"sources":["F:/noveo/my-react-app/src/services/requests.js"],"names":["register","username","password","Promise","resolve","reject","localStorage","setItem","JSON","parse","setTimeout","Math","random","toUpperCase","Error","login"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAG,QAA4B;AAAA,MAA3B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;AAChD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,KAAL,CAAW;AAACR,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAAX,CAA7B;AACAQ,IAAAA,UAAU,CAAC,MAAM;AACb,UAAIC,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AAAA;;AACrBR,QAAAA,OAAO,CAAC;AACJH,UAAAA,QAAQ,2BAAEA,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEY,WAAV,EAAF,yEAA6B;AADjC,SAAD,CAAP;AAGH,OAJD,MAIO;AACH,cAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACH;AACJ,KARS,EAQP,IARO,CAAV;AASH,GAXM,CAAP;AAYH,CAbM;AAeP,OAAO,MAAMC,KAAK,GAAG,SAA4B;AAAA,MAA3B;AAAEd,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;AAC7C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCK,IAAAA,UAAU,CAAC,MAAM;AACb,UAAIC,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AAAA;;AACrBR,QAAAA,OAAO,CAAC;AACJH,UAAAA,QAAQ,4BAAEA,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEY,WAAV,EAAF,2EAA6B;AADjC,SAAD,CAAP;AAGH,OAJD,MAIO;AACH,cAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACH;AACJ,KARS,EAQP,IARO,CAAV;AASH,GAVM,CAAP;AAWH,CAZM","sourcesContent":["/**\r\n *\r\n * @param username {string}\r\n * @param password {string}\r\n * @returns {Promise<{username: string, password: string}>}\r\n */\r\nexport const register = ({ username, password }) => {\r\n    return new Promise((resolve, reject) => {\r\n        localStorage.setItem('user', JSON.parse({username, password}));\r\n        setTimeout(() => {\r\n            if (Math.random() > 0.2) {\r\n                resolve({\r\n                    username: username?.toUpperCase() ?? 'BILLY'\r\n                });\r\n            } else {\r\n                throw(new Error('Impossible!'));\r\n            }\r\n        }, 3000);\r\n    });\r\n}\r\n\r\nexport const login = ({ username, password }) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (Math.random() > 0.5) {\r\n                resolve({\r\n                    username: username?.toUpperCase() ?? 'BILLY'\r\n                });\r\n            } else {\r\n                throw(new Error('Impossible!'));\r\n            }\r\n        }, 3000);\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}